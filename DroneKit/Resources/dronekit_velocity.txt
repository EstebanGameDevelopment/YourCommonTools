import time
from dronekit import connect, VehicleMode, LocationGlobalRelative, Command, LocationGlobal
from pymavlink import mavutil

#-- Connect to the vehicle
print('Connecting...')
vehicleactivated = True
vehicle = connect('udp:127.0.0.1:14551')

#-- Setup the commanded flying speed
gnd_speed = $TOTALSPEED # [m/s]

#-- Define arm and takeoff
def arm_and_takeoff(altitude):

   while not vehicle.is_armable:
      print("waiting to be armable")
      time.sleep(1)

   print("Arming motors")
   vehicle.mode = VehicleMode("GUIDED")
   vehicle.armed = True

   while not vehicle.armed: time.sleep(1)

   print("Taking Off")
   vehicle.simple_takeoff(altitude)

   while True:
      v_alt = vehicle.location.global_relative_frame.alt
      print(">> Altitude = %.1f m"%v_alt)
      if v_alt >= altitude - 1.0:
          print("Target altitude reached")
          break
      time.sleep(1)
      
#-- Define the function for sending mavlink velocity command in body frame
def set_velocity_body(vehicle, vx, vy, vz):
    msg = vehicle.message_factory.set_position_target_local_ned_encode(0,0,0,mavutil.mavlink.MAV_FRAME_BODY_NED, 0b0000111111000111, 0, 0, 0, vx, vy, vz, 0, 0, 0, 0, 0)
    vehicle.send_mavlink(msg)
    vehicle.flush()
    
#-- Key event function
def set_new_direction(nvx, nvy, nvz):
	print("Select new speed")
	set_velocity_body(vehicle, gnd_speed * nvx, gnd_speed * nvy, gnd_speed * nvz)
    
#---- MAIN FUNCTION
#- Takeoff
arm_and_takeoff(10)

#- New direction
returnhome = $RETURNHOME;
if returnhome == 1:
	print("Returning to Launch")
	vehicle.mode = VehicleMode("RTL")
else:
	k = 0
	while k < $TOTALTIME:
		set_new_direction($PARAMVX,$PARAMVY,$PARAMVZ)
		# sleep so we can see the change in map
		time.sleep(1)
		k = k + 1
	
# Close vehicle object before exiting script
print("Close vehicle object")
vehicle.close()

vehicleactivated = False